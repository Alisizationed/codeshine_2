/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useApiContext, ApiContext, queryKeyFn } from "./apiContext";
import { deepMerge } from "./apiUtils";
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";

type QueryFnOptions = {
  signal?: AbortController["signal"];
};

export type GetLlamaResponseQueryParams = {
  request: string;
};

export type GetLlamaResponseError = Fetcher.ErrorWrapper<undefined>;

export type GetLlamaResponseResponse = string[];

export type GetLlamaResponseVariables = {
  queryParams: GetLlamaResponseQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetLlamaResponse = (
  variables: GetLlamaResponseVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    GetLlamaResponseResponse,
    GetLlamaResponseError,
    undefined,
    {},
    GetLlamaResponseQueryParams,
    {}
  >({ url: "/ai", method: "get", ...variables, signal });

export function getLlamaResponseQuery(variables: GetLlamaResponseVariables): {
  queryKey: reactQuery.QueryKey;
  queryFn: (options: QueryFnOptions) => Promise<GetLlamaResponseResponse>;
};

export function getLlamaResponseQuery(
  variables: GetLlamaResponseVariables | reactQuery.SkipToken,
): {
  queryKey: reactQuery.QueryKey;
  queryFn:
    | ((options: QueryFnOptions) => Promise<GetLlamaResponseResponse>)
    | reactQuery.SkipToken;
};

export function getLlamaResponseQuery(
  variables: GetLlamaResponseVariables | reactQuery.SkipToken,
) {
  return {
    queryKey: queryKeyFn({
      path: "/ai",
      operationId: "getLlamaResponse",
      variables,
    }),
    queryFn:
      variables === reactQuery.skipToken
        ? reactQuery.skipToken
        : ({ signal }: QueryFnOptions) =>
            fetchGetLlamaResponse(variables, signal),
  };
}

export const useSuspenseGetLlamaResponse = <TData = GetLlamaResponseResponse,>(
  variables: GetLlamaResponseVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetLlamaResponseResponse,
      GetLlamaResponseError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useApiContext(options);
  return reactQuery.useSuspenseQuery<
    GetLlamaResponseResponse,
    GetLlamaResponseError,
    TData
  >({
    ...getLlamaResponseQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

export const useGetLlamaResponse = <TData = GetLlamaResponseResponse,>(
  variables: GetLlamaResponseVariables | reactQuery.SkipToken,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetLlamaResponseResponse,
      GetLlamaResponseError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useApiContext(options);
  return reactQuery.useQuery<
    GetLlamaResponseResponse,
    GetLlamaResponseError,
    TData
  >({
    ...getLlamaResponseQuery(
      variables === reactQuery.skipToken
        ? variables
        : deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation = {
  path: "/ai";
  operationId: "getLlamaResponse";
  variables: GetLlamaResponseVariables | reactQuery.SkipToken;
};
