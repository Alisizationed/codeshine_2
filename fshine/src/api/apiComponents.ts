/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useApiContext, ApiContext, queryKeyFn } from "./apiContext";
import { deepMerge } from "./apiUtils";
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";

type QueryFnOptions = {
  signal?: AbortController["signal"];
};

export type StreamLlamaResponseError = Fetcher.ErrorWrapper<undefined>;

export type StreamLlamaResponseVariables = {
  body?: string;
} & ApiContext["fetcherOptions"];

export const fetchStreamLlamaResponse = (
  variables: StreamLlamaResponseVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, StreamLlamaResponseError, string, {}, {}, {}>({
    url: "/ai/stream",
    method: "post",
    ...variables,
    signal,
  });

export const useStreamLlamaResponse = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      StreamLlamaResponseError,
      StreamLlamaResponseVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    StreamLlamaResponseError,
    StreamLlamaResponseVariables
  >({
    mutationFn: (variables: StreamLlamaResponseVariables) =>
      fetchStreamLlamaResponse(deepMerge(fetcherOptions, variables)),
    ...options,
  });
};

export type QueryOperation = {
  path: string;
  operationId: never;
  variables: unknown | reactQuery.SkipToken;
};
